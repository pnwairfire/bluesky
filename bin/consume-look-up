#!/usr/bin/env python

import argparse
import logging
import os
import sys

try:
    from bluesky.consumption.consume.precomputed import look_up

except:
    root_dir = os.path.abspath(os.path.join(sys.path[0], '../'))
    sys.path.insert(0, root_dir)
    from bluesky.consumption.consume.precomputed import (
        look_up, FIRE_TYPES, BURN_TYPES, ECOREGIONS, SEASONS,
        VARIABLE_SETTINGS
    )


##
## Args
##

EXAMPLES_STRING = """
Examples:

    {script} -i 52 -f rx -b natural -e western -s spring -t dry -d 'very dry' -l 'dry'

 """.format(script=sys.argv[0])

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--fccs-id', required=True, help="FCCS Id; e.g. 52")
    parser.add_argument('-f', '--fire-type', required=True, help=f"Options: '{', '.join(FIRE_TYPES)}'")
    parser.add_argument('-b', '--burn-type', required=True, help=f"Options: '{', '.join(BURN_TYPES)}'")
    parser.add_argument('-e', '--ecoregion', required=True, help=f"Options: '{', '.join(ECOREGIONS)}'")
    parser.add_argument('-s', '--season', required=True, help=f"Options: '{', '.join(SEASONS)}'")
    parser.add_argument('-t', '--thousand-hr-fm-level', required=True, help=f"Options: '{', '.join(list(VARIABLE_SETTINGS['fuel_moisture_1000hr_pct']))}'")
    parser.add_argument('-d', '--duff-fm-level', required=True, help=f"Options: '{', '.join(list(VARIABLE_SETTINGS['fuel_moisture_duff_pct']))}'")
    parser.add_argument('-l', '--litter-fm-level', required=True, help=f"Options: '{', '.join(list(VARIABLE_SETTINGS['fuel_moisture_litter_pct']))}'")
    parser.add_argument('--log-level', default="INFO", help="Log level")

    parser.epilog = EXAMPLES_STRING
    parser.formatter_class = argparse.RawTextHelpFormatter

    args = parser.parse_args()

    logging.basicConfig(level=getattr(logging, args.log_level),
        format='%(asctime)s %(levelname)s: %(message)s')

    logging.info(" Args:")
    for k,v in args.__dict__.items():
        logging.info("   %s: %s", k, v)

    return args


##
## Main
##

def main():
    args = parse_args()

    c = look_up(args.fccs_id, args.fire_type, args.burn_type, args.ecoregion,
        args.season, args.thousand_hr_fm_level, args.duff_fm_level,
        args.litter_fm_level)

    print(c)

if __name__ == "__main__":
    main()
