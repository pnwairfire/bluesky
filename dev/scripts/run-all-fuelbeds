#!/usr/bin/env python

import argparse
import datetime
import json
import logging
import os
import subprocess
import sys

FCCS_IDS = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40,
    41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59,
    60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
    80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98,
    99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 114, 115, 120, 121,
    123, 124, 125, 129, 131, 133, 134, 135, 138, 140, 142, 143, 146, 147, 148,
    152, 154, 155, 156, 157, 158, 161, 162, 164, 165, 166, 168, 170, 173, 174,
    175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
    196, 203, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
    222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236,
    237, 238, 239, 240, 241, 242, 243, 260, 261, 262, 263, 264, 265, 266, 267,
    268, 269, 270, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 286,
    287, 288, 289, 291, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
    312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326,
    327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 401, 402,
    403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417,
    418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432,
    433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 448, 449, 450,
    451, 453, 454, 455, 456, 457, 458, 1201, 1202, 1203, 1205, 1223, 1225,
    1241, 1242, 1243, 1244, 1245, 1247, 1252, 1260, 1261, 1262, 1271, 1273,
    1280, 1281, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,
]

DEFAULT_COORDINATES = [
    (48.9869117595821, -123.075903210561), # FCCS 0
    (48.9931734411784, -119.720118415599), # FCCS 1
    (48.9704284421343, -122.773667554413), # FCCS 2
    (49.0181424766255, -119.24219761596), # FCCS 4
    (44.0142656657481, -121.73748995362), # FCCS 5
    (47.5385963329794, -120.625732956489), # FCCS 6
    (44.0453617198674, -121.580642782086), # FCCS 7
    (48.9860932836638, -121.294509943339), # FCCS 8
    (48.9771069744993, -123.029471592568), # FCCS 9
    (49.0018257930946, -123.096444931626), # FCCS 10
    (48.9920271573744, -123.0499993687), # FCCS 11
    (45.4069482556509, -121.717417247232), # FCCS 12
    (43.3287606162824, -123.123236568828), # FCCS 14
    (43.8097136363046, -121.218523414062), # FCCS 15
    (44.1708648190089, -122.071872339824), # FCCS 16
    (43.9811449788926, -121.763611190842), # FCCS 17
    (43.6401093648701, -120.896676047853), # FCCS 19
    (49.0176367524946, -118.102619046466), # FCCS 21
    (48.9834337199482, -120.31572354965), # FCCS 22
    (48.9855423503698, -118.590899051383), # FCCS 24
    (43.9217244359008, -111.281196564052), # FCCS 25
    (40.6258151618201, -108.834427597259), # FCCS 27
    (49.0284638037221, -119.733460822703), # FCCS 28
    (43.7601049545907, -121.471213166119), # FCCS 30
    (35.5334439162653, -104.503430135678), # FCCS 32
    (42.6239365860556, -112.746787432944), # FCCS 34
    (40.660802448551, -123.682836879205), # FCCS 36
    (45.6198572147531, -121.243213086397), # FCCS 37
    (45.5163988219007, -122.345557184062), # FCCS 38
    (36.2316999852791, -106.229502302822), # FCCS 40
    (48.636806137983, -123.120423345444), # FCCS 41
    (49.0065607914035, -113.915832011096), # FCCS 42
    (34.9732969307913, -111.746910773939), # FCCS 43
    (42.0189179481942, -122.664646056897), # FCCS 44
    (36.5504178577881, -112.274439256139), # FCCS 45
    (45.6545968192076, -121.256679190081), # FCCS 46
    (42.6947315445233, -124.149256720507), # FCCS 47
    (40.979666173091, -119.287260655184), # FCCS 49
    (38.0066071008626, -122.742871673072), # FCCS 51
    (49.000261453742, -121.062477526461), # FCCS 52
    (36.6699094395201, -115.18539194129), # FCCS 54
    (45.6167126972414, -121.308414986574), # FCCS 55
    (49.0247512280781, -119.202894451318), # FCCS 56
    (48.9577655021324, -118.816936283409), # FCCS 57
    (48.9663530935821, -121.706268100414), # FCCS 59
    (49.0263856315011, -119.690870555857), # FCCS 60
    (48.9924061360615, -121.157201824131), # FCCS 61
    (48.7250797707655, -121.984126873138), # FCCS 63
    (46.2336452801624, -124.014862665974), # FCCS 65
    (49.0116292517087, -112.681834082168), # FCCS 66
    (49.0124333300012, -114.508833097963), # FCCS 67
    (45.2316656623553, -121.225675065344), # FCCS 69
    (48.9317590811661, -121.790013524326), # FCCS 70
    (49.0423092461926, -100.476992684752), # FCCS 90
    (44.1793375642135, -70.5327979664766), # FCCS 107
    (47.3733075794536, -68.3841740991991), # FCCS 110
    (37.4345941941797, -85.8761955876218), # FCCS 114
    (43.9299899059115, -69.8887323846821), # FCCS 123
    (49.0171702493192, -97.2063042313837), # FCCS 129
    (49.0465329966467, -100.342067821245), # FCCS 131
    (49.0265750178311, -102.315328798374), # FCCS 133
    (39.4238122928056, -76.8361992992635), # FCCS 135
    (47.3371151477188, -69.3732879199956), # FCCS 138
    (48.7650742855789, -95.17083130116), # FCCS 140
    (49.208405115343, -94.7858885703042), # FCCS 142
    (49.337513729836, -94.9734130911958), # FCCS 143
    (46.7560203588815, -84.9746769021123), # FCCS 147
    (49.0355557847128, -98.5574420270987), # FCCS 154
    (47.3741927106444, -68.342570060073), # FCCS 155
    (34.8941029525998, -91.9757655917654), # FCCS 157
    (38.8215176648558, -75.4280556150121), # FCCS 161
    (37.8982730139583, -78.4184491968361), # FCCS 162
    (31.1478753080326, -81.5116520679586), # FCCS 165
    (36.1412074039948, -77.4387749816757), # FCCS 166
    (37.3299779065017, -77.2430736126431), # FCCS 170
    (30.1195096596983, -93.5511921365166), # FCCS 173
    (36.9212235112989, -76.0163775102812), # FCCS 174
    (44.7275808748374, -67.4602220250098), # FCCS 175
    (43.1666166066378, -76.1934934098282), # FCCS 176
    (37.769469334749, -78.3444684103332), # FCCS 180
    (33.7605059368948, -95.0252119742547), # FCCS 184
    (37.6272160431415, -76.9918265482416), # FCCS 185
    (37.2722193475334, -77.2810271625387), # FCCS 186
    (30.5901958246784, -81.7697408120438), # FCCS 188
    (33.3394097902751, -79.8561837116919), # FCCS 191
    (48.6691363488319, -94.5543200702072), # FCCS 196
    (29.3366081829965, -81.3923058711044), # FCCS 203
    (48.9635151687969, -120.586982428839), # FCCS 208
    (44.6366943262208, -121.364832903337), # FCCS 210
    (48.0070112324364, -108.896874792293), # FCCS 211
    (41.7636879949613, -111.875464446704), # FCCS 216
    (39.5625343887374, -105.179868216921), # FCCS 217
    (36.6608372126933, -112.195467223102), # FCCS 219
    (49.013030324534, -113.574180688732), # FCCS 224
    (42.5560983903871, -111.623716538375), # FCCS 226
    (36.1709112474993, -106.514676451646), # FCCS 227
    (40.7108808611349, -105.172775362321), # FCCS 230
    (36.3412675119501, -112.411471644691), # FCCS 232
    (49.0225495082409, -119.215996406807), # FCCS 235
    (48.5661077023025, -104.166025541218), # FCCS 236
    (48.9482924932241, -121.85283212305), # FCCS 237
    (48.9826646460619, -122.021188269291), # FCCS 238
    (28.8838850423652, -81.7617696745855), # FCCS 240
    (44.5931485179043, -68.0071988606689), # FCCS 243
    (38.109846387294, -97.834791923939), # FCCS 264
    (48.6126431986659, -95.7094647160961), # FCCS 266
    (44.5444827122629, -70.4965075551848), # FCCS 268
    (41.2720790444767, -79.8907163088806), # FCCS 269
    (39.1833959601556, -79.3033164378728), # FCCS 270
    (28.0328988019484, -82.817014230261), # FCCS 272
    (44.4024045238755, -112.130851763481), # FCCS 273
    (44.9968524007881, -73.416943748348), # FCCS 275
    (35.5734553241212, -88.9181802671926), # FCCS 276
    (47.2026496036482, -68.3349188296139), # FCCS 279
    (29.8240708628895, -94.7300860071487), # FCCS 280
    (37.9629120410585, -90.6693714400526), # FCCS 281
    (40.6721039597022, -74.6390547869858), # FCCS 283
    (47.4485813976994, -69.1756800950753), # FCCS 284
    (48.009458863875, -112.651307292291), # FCCS 286
    (45.748543618509, -69.0882435380921), # FCCS 287
    (43.6181296611586, -70.282039880093), # FCCS 288
    (29.1635795729191, -81.329260922282), # FCCS 291
    (40.6077429353267, -122.221612483018), # FCCS 301
    (49.020315049504, -119.173427532931), # FCCS 302
    (48.96621572752, -112.752109754129), # FCCS 303
    (48.3582191635459, -124.61926296569), # FCCS 304
    (48.9956488309075, -123.079696755109), # FCCS 305
    (41.8175793240373, -122.649034386848), # FCCS 306
    (36.2960689319761, -113.852176803827), # FCCS 307
    (48.9753480216309, -119.769083043025), # FCCS 308
    (40.3340479116923, -118.999256124074), # FCCS 309
    (48.3573014355343, -111.562368690488), # FCCS 310
    (47.2336356829707, -120.033286420755), # FCCS 311
    (44.0055214370424, -112.175629398664), # FCCS 312
    (49.004788053355, -118.472827415641), # FCCS 313
    (44.7049170132128, -107.271295538118), # FCCS 314
    (48.9894117515938, -119.189845061641), # FCCS 315
    (41.5507929226195, -124.081762716404), # FCCS 316
    (44.3771213443887, -112.188610895909), # FCCS 317
    (48.9871122732412, -110.145560556527), # FCCS 318
    (48.9760735729537, -121.654260065089), # FCCS 319
    (48.1941764128111, -112.87538611175), # FCCS 320
    (44.9915036665126, -73.8757851061167), # FCCS 401
    (35.1636671248133, -93.6786371661208), # FCCS 403
    (40.5402265178069, -76.7504624012469), # FCCS 404
    (39.4118000638901, -79.2500492189508), # FCCS 405
    (37.2760601510889, -89.5893257708837), # FCCS 406
    (34.4506467991565, -87.7885548981154), # FCCS 407
    (49.0435899235921, -100.436517097397), # FCCS 408
    (38.7448927939812, -79.1451222093491), # FCCS 409
    (40.0037508753174, -77.2338851594262), # FCCS 410
    (33.5768180027044, -99.2042147350653), # FCCS 411
    (45.9408797956563, -68.9276755114898), # FCCS 412
    (48.8101412357005, -95.102957825632), # FCCS 413
    (36.2073655263008, -86.1202038606033), # FCCS 414
    (40.7998220650991, -75.5673861613984), # FCCS 416
    (31.5055944205585, -93.1814743059871), # FCCS 417
    (45.9077121712558, -86.3459094698089), # FCCS 418
    (30.8492319295537, -98.8135410755581), # FCCS 419
    (38.8872473718669, -84.1504248069386), # FCCS 421
    (35.4620078706138, -93.8585679443833), # FCCS 422
    (39.2686997595816, -84.4767228857595), # FCCS 423
    (31.1218711784597, -82.4521120080721), # FCCS 424
    (33.140053437865, -82.9646020006898), # FCCS 425
    (29.3563717308089, -98.6806279357732), # FCCS 426
    (49.3376115713129, -94.9869813764912), # FCCS 427
    (27.8693070624862, -82.3930178868253), # FCCS 428
    (42.8757254757878, -74.0583890810489), # FCCS 429
    (37.2343809273175, -89.4788663993603), # FCCS 430
    (33.099668582168, -88.5244751789763), # FCCS 431
    (27.8867426201542, -80.4656134442384), # FCCS 432
    (42.9258959343583, -70.8653096325998), # FCCS 433
    (37.2503456443235, -89.4432429123509), # FCCS 434
    (27.5804585961068, -97.3946593254604), # FCCS 435
    (27.6345779468605, -97.4157194164119), # FCCS 436
    (27.6348460938939, -97.3955474911378), # FCCS 437
    (26.9593368251621, -81.1006303071413), # FCCS 438
    (34.932334796824, -78.6890891644473), # FCCS 439
    (28.2367466239467, -80.8537384452852), # FCCS 440
    (49.0040885923241, -96.0991466796692), # FCCS 441
    (47.371595928252, -68.3299613253287), # FCCS 442
    (48.932680990767, -98.7017159695598), # FCCS 443
    (48.6124533629081, -95.6289661748641), # FCCS 445
    (37.4207600369149, -77.0104152537932), # FCCS 448
    (43.0983458228212, -76.8944965092278), # FCCS 449
    (33.0212694033276, -98.4812696005488), # FCCS 450
    (43.8974952735879, -76.4248571825583), # FCCS 453
    (47.289207090314, -68.1599442644435), # FCCS 454
    (48.2820767765766, -94.9634444562931), # FCCS 455
    (30.4555995913479, -92.6330633411339), # FCCS 456
    (27.9387909639078, -80.5073173754409), # FCCS 457
    (27.478917562271, -97.5239130638358) # FCCS 458
]

DEFAULT_AREA = 1000


##
## Args
##

EXAMPLES_STRING = """
Examples:

    {script} -m fccs-ids
    {script} -m fccs-ids -i 1,2,3
    {script} -m coordinates -c "45.1,-120;34,-114.2"
    {script} -m coordinates -t wildfire -a 1000 --indented-output \\
        --produce-emissions-csv --run-through-plumerise

 """.format(script=sys.argv[0])

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-m', '--mode', required=True,
        help="'coordinates' or 'fccs-ids'")
    parser.add_argument('-i', '--fccs-ids',
        help="comma-dilimited list of fccs ids to run")
    parser.add_argument('-c','--coordinates',
        help="semi-colon-dilimited list of coordinages; e.g. '45,-123;33,-119'")
    parser.add_argument('-t', '--fire-type', default="wildfire",
        help="'wildfire' or 'rx'; default 'wildfire'")
    parser.add_argument('-a', '--area', default=DEFAULT_AREA,
        type=float, help="Are per fire; default {}".format(DEFAULT_AREA))
    parser.add_argument('-e', '--ecoregion', default="western",
        help="ecoregion; default 'western'")
    parser.add_argument('--indented-output', default=False,
        action="store_true", help="produce indented output")
    parser.add_argument('-l', '--local-code',
        default=False, action="store_true",
        help="Run with local code mounted in docker container")
    parser.add_argument('--produce-emissions-csv', action="store_true",
        help="run extrafiles to produce the emisisons csv")
    parser.add_argument('--run-through-plumerise', action="store_true")
    parser.add_argument('--log-level', default="INFO", help="Log level")

    parser.epilog = EXAMPLES_STRING
    parser.formatter_class = argparse.RawTextHelpFormatter

    args = parser.parse_args()

    logging.basicConfig(level=getattr(logging, args.log_level),
        format='%(asctime)s %(levelname)s: %(message)s')

    logging.info(" Args:")
    for k,v in args.__dict__.items():
        if k in ('fccs_ids', 'coordinates'):
            logging.info("   %s: %s", k, v and v[:50])
        else:
            logging.info("   %s: %s", k, v)

    return args


##
## Input File
##

CONSUME_LOCATION_FIELDS = {
    "moisture_1hr": 7,
    "moisture_10hr": 8,
    "moisture_100hr": 9,
    "moisture_1khr": 12,
    "moisture_duff": 40,
    "canopy_consumption_pct": 60
}

def get_fccs_ids_fires(args, times):
    fccs_ids = ([i.strip() for i in args.fccs_ids.split(',')]
        if args.fccs_ids else FCCS_IDS)
    fires = []
    for fccs_id in fccs_ids:
        fires.append({
            "type": args.fire_type,
            "activity": [
                {
                    "active_areas": [
                        {
                            "start": times['start'],
                            "end": times['end'],
                            "utc_offset": "-07:00",
                            "specified_points": [
                                {
                                    "lng": -120.5906549, #-119.7615805,
                                    "lat": 39.0704668, #37.909644,
                                    "ecoregion": args.ecoregion,
                                    "area": args.area,
                                    "fuelbeds":[
                                        {
                                            "pct": 100.0,
                                            "fccs_id": str(fccs_id)
                                        }
                                    ],
                                }
                            ]
                        }
                    ]
                }
            ]
        })
        fires[-1]['activity'][0]['active_areas'][0].update(**CONSUME_LOCATION_FIELDS)
    return fires

def get_coordinates_fires(args, times):
    coordinates = ([[float(y.strip()) for y in x.split(',')] for x in args.coordinates.split(';')]
        if args.coordinates else DEFAULT_COORDINATES)
    fires = []
    for lat, lng in coordinates:
        fires.append({
            "type": args.fire_type,
            "activity": [
                {
                    "active_areas": [
                        {
                            "start": times['start'],
                            "end": times['end'],
                            "utc_offset": "-07:00",
                            "specified_points": [
                                {
                                    "lat": lat,
                                    "lng": lng,
                                    "ecoregion": args.ecoregion,
                                    "area": args.area
                                }
                            ]
                        }
                    ]
                }
            ]
        })
        fires[-1]['activity'][0]['active_areas'][0].update()
    return fires

MODES = {
    'fccs-ids': get_fccs_ids_fires,
    'coordinates': get_coordinates_fires
}

def get_times():
    today = datetime.date.today()
    return {
        "start": today.strftime('%Y-%m-%dT%H:%M:%SZ'),
        "end": (today + datetime.timedelta(days=1)).strftime('%Y-%m-%dT%H:%M:%SZ')
    }

def write_input(args, run_id, host_output_dir):
    times = get_times()
    input_data = {
        "run_id": run_id,
        "fires": MODES[args.mode](args, times)
    }
    with open(host_output_dir + '/input.json', 'w') as f:
        f.write(json.dumps(input_data))


##
## Config File
##

def write_config(args, host_output_dir, docker_output_dir):
    config = {
        "config": {
            "skip_failed_fires": True,
            "fuelbeds": {
                "no_sampling": True
            },
            "emissions": {
                "model": "prichard-oneill"
            },
            "extrafiles":{
                "dest_dir": docker_output_dir,
                "sets": (["firescsvs", "emissionscsv"]
                    if args.produce_emissions_csv else ["firescsvs"]),
                "firescsvs": {
                    "fire_locations_filename": "fire_locations.csv",
                    "fire_events_filename": "fire_events.csv"
                },
                "emissionscsv": {
                    "filename": "fire_emissions.csv"
                }
            },
            "plumerise": {
                "model":"feps",
                "feps": {
                    "working_dir": docker_output_dir
                }
            }
        }
    }
    with open(host_output_dir + '/config.json', 'w') as f:
        f.write(json.dumps(config))


##
## BSP Command
##

def get_command(args, docker_output_dir):
    cmd = "docker run -ti --rm -v $PWD/tmp/run-all-fuelbeds/:/data/"

    if args.local_code:
        cmd += (" -v $PWD/:/code/"
            " -e PYTHONPATH=/code/"
            " -e PATH=/code/bin/:$PATH")

    cmd += (" bluesky bsp --log-level=" + args.log_level
        + " --log-file " + docker_output_dir + "/output.log"
        + " -c " + docker_output_dir + "/config.json"
        + " -i " + docker_output_dir + "/input.json"
        + " -o " + docker_output_dir + "/output.json")

    if args.indented_output:
        cmd += ' --indent 4'

    if args.mode == 'coordinates':
        cmd += ' fuelbeds'

    cmd += " consumption emissions"

    if args.produce_emissions_csv or args.run_through_plumerise:
        cmd += " timeprofile"
    if args.run_through_plumerise:
        cmd += " plumerise"

    cmd += " extrafiles"

    return cmd


##
## Main
##

def main():
    args = parse_args()
    if args.mode not in MODES:
        print("\n*** ERROR: -m/--mode must be one of '{}'\n".format(
            "', '".join(MODES.keys())))
        sys.exit(1)

    run_id = (("by-fccsids" if args.mode == 'fccs-ids' else 'by-coordinates')
        + '_' + datetime.datetime.utcnow().strftime('%Y%m%dT%H%M%SZ'))
    host_output_dir = './tmp/run-all-fuelbeds/' + run_id.replace('_','/')
    if not os.path.exists(host_output_dir):
        os.makedirs(host_output_dir)
    docker_output_dir = '/data/' + run_id.replace('_','/')

    write_config(args, host_output_dir, docker_output_dir)
    write_input(args, run_id, host_output_dir)

    cmd = get_command(args, docker_output_dir)

    logging.info("Running command: " + cmd)
    logging.info("Output files:")
    logging.info("   Log: %s", host_output_dir + "/output.log")
    logging.info("   config: %s", host_output_dir + "/config.json")
    logging.info("   input: %s", host_output_dir + "/input.json")
    logging.info("   output: %s", host_output_dir + "/output.json")

    subprocess.run(cmd, shell=True, check=True)

if __name__ == "__main__":
    main()
